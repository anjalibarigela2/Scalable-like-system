version: "3.9"

services:
  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped

  db:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      POSTGRES_USER: appuser
      POSTGRES_PASSWORD: apppass
      POSTGRES_DB: appdb
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    restart: unless-stopped

  web:
    build: ./web_app
    container_name: web
    environment:
      REDIS_HOST: redis
    depends_on:
      - redis
    ports:
      - "5000:5000"
    restart: unless-stopped

  processor:
    build: ./processor
    container_name: processor
    environment:
      REDIS_HOST: redis
      POSTGRES_HOST: db
      POSTGRES_DB: appdb
      POSTGRES_USER: appuser
      POSTGRES_PASSWORD: apppass
    depends_on:
      - redis
      - db
    restart: unless-stopped

  reader:
    build: ./reader_app
    container_name: reader
    environment:
      POSTGRES_HOST: db
      POSTGRES_DB: appdb
      POSTGRES_USER: appuser
      POSTGRES_PASSWORD: apppass
    depends_on:
      - db
    ports:
      - "5001:5000"
    restart: unless-stopped

  # (We will run load_tester later manually so it doesnâ€™t start spamming immediately.)
  load_tester:
    build: ./load_tester
    environment:
      TARGET_URL: http://web:5000/like
      REQUEST_COUNT: 1000
    depends_on:
      - web

volumes:
  db_data:


# services:
#   # Redis service for message queueing
#   redis:
#     image: "redis:6-alpine"

#   # PostgreSQL database service
#   db:
#     image: postgres:13-alpine
#     volumes:
#       - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
#       - postgres_data:/var/lib/postgresql/data/
#     environment:
#       - POSTGRES_USER=user
#       - POSTGRES_PASSWORD=password
#       - POSTGRES_DB=likes_db

#   # Web app to receive likes
#   web:
#     build:
#       context: ./web_app
#       dockerfile: Dockerfile
#     ports:
#       - "5001:5000"
#     environment:
#       - REDIS_HOST=redis
#     depends_on:
#       - redis
#     healthcheck:
#       test: ["CMD", "python", "healthcheck.py"]
#       interval: 10s
#       timeout: 5s
#       retries: 5

#   # Processor to consume likes from the queue and write to DB
#   processor:
#     build: ./processor
#     environment:
#       - PYTHONUNBUFFERED=1
#       - REDIS_HOST=redis
#       - POSTGRES_HOST=db
#       - POSTGRES_USER=user
#       - POSTGRES_PASSWORD=password
#       - POSTGRES_DB=likes_db
#     depends_on:
#       - redis
#       - db

#   # Reader app to query the database
#   reader:
#     build: ./reader_app
#     ports:
#       - "5002:5000"
#     environment:
#       - POSTGRES_HOST=db
#       - POSTGRES_USER=user
#       - POSTGRES_PASSWORD=password
#       - POSTGRES_DB=likes_db
#     depends_on:
#       - db
      
#   # One-off service to run the load test
#   load_tester:
#     build: ./load_tester
#     environment:
#       - TARGET_URL=http://web:5000/like
#     depends_on:
#       web:
#         condition: service_healthy
#     profiles:
#       - test

#   # One-off service to reset the database
#   db_resetter:
#     image: postgres:13-alpine
#     environment:
#       - PGPASSWORD=password
#     command: >
#       /bin/sh -c "psql -h db -U user -d likes_db -c 'TRUNCATE likes;'"
#     depends_on:
#       - db
#     profiles:
#       - db-tools

# # Define the named volume for data persistence
# volumes:
#   postgres_data: